{"version":3,"sources":["List.js","calculator.js","App.js","serviceWorker.js","index.js"],"names":["List","props","className","items","map","item","index","key","operators","operands","space","parenthesis","decimal","negation","inputIsValid","expression","every","c","includes","getOrderOfPrecedence","operator","evaluateOperator","a","b","calculate","stack","i","length","isNaN","parseFloat","pop","push","result","undefined","evaluatePostFixExpression","prev_c","String","getPostFixExpression","error","console","App","state","results","expressions","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","type","placeholder","aria-label","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bae7b4ea.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst List = props => (\n<ul className=\"list-group\">\n    {\n      props.items.map((item, index) => <li className=\"list-group-item\" key={index}>{item}</li>)\n    }\n  </ul>\n);\n\nexport default List;","'use-strict';\nconst operators = \"+-/*\";\nconst operands = \"1234567890\"\nconst space = \" \";\nconst parenthesis = \"()\";\nconst decimal = \".\";\nconst negation = 'n';\n\nexport function inputIsValid(expression) {\n    return [...expression].every((c) => \n        ((operators + operands + space + parenthesis + decimal).includes(c)));\n}\n\nexport function getOrderOfPrecedence(operator) {\n    if (operator === \"+\" || operator === \"-\") {\n        return 1;\n    }\n    if (operator === \"*\" || operator === \"/\") {\n        return 2;\n    }\n}\n\nexport function evaluateOperator(a, b, operator) {\n    switch(operator) {\n        case \"+\":\n            return b + a;\n        case \"-\":\n            return b - a;\n        case \"*\":\n            return b * a;\n        case \"/\":\n            return b / a;\n        default:\n            throw \"Operator not recognized\";\n            \n    }\n}\nexport function getPostFixExpression(expression){\n    if (!inputIsValid(expression)) {\n        return [];\n    }\n    let stack = [];\n    let result = [];\n    let prev_c = \"\";\n    let i = 0;\n    expression = String(expression);\n\n    while (i < expression.length) {\n        let c = expression[i];\n        if (c === \" \") {\n            i++;\n            continue;\n        }\n        if (c === decimal) {\n            result.push(String(result.pop()) + decimal);\n        }\n        if (operands.includes(c)) {\n            if (prev_c !== \"\" && (operands + decimal).includes(prev_c)) {\n                result.push(String(result.pop())+ c);\n            } else if (prev_c === negation) { //handle negation\n                result.pop();\n                result.push('-' + c);\n            } else {\n                result.push(c);\n            }\n        }\n        if (c === \"(\") {\n            stack.push(c);\n        }\n        if (c === \")\") {\n            while (stack.length > 0 && stack[stack.length - 1] !== \"(\") {\n                result.push(stack.pop());\n            }\n            stack.pop();\n        }\n\n        if (c === '-') { // negation sign\n            if (i === 0 || prev_c === \"(\" || operators.includes(prev_c)) {\n                prev_c = negation;\n                result.push(negation);\n                i++;\n                continue;\n            }\n        } \n\n        if (c === '+') {\n            if (i === 0 || prev_c === '(' || operators.includes(prev_c)) {\n                i++;\n                continue;\n            }\n        }\n\n        if(operators.includes(c)) {\n            \n            if (stack.length === 0 || stack[stack.length - 1] === \"(\") {\n                stack.push(c);\n            } else {\n                while (\n                    stack.length > 0 && \n                    stack[0] !== \"(\" && \n                    getOrderOfPrecedence(c) <= getOrderOfPrecedence(stack[stack.length - 1])) {\n                    result.push(stack.pop());\n                }\n                stack.push(c);\n            }\n        }\n        prev_c = c;\n        i++;\n    }\n\n    while (stack.length > 0) {\n        result.push(stack.pop());\n    }\n\n    for (let i = 0; i < result.length; i++) {\n        if(parenthesis.includes(result[i])) {\n            return [] \n        }\n    }\n\n    return result;\n}\n\nexport function evaluatePostFixExpression(expression) {\n    \n    let stack = [];\n    let i = 0;\n    while (i < expression.length) {\n        \n        let c = expression[i];\n        if (!isNaN(c)) {\n            stack.push(c);\n        } \n        else if (operators.includes(c)) {\n            let a = parseFloat(stack.pop());\n            let b = parseFloat(stack.pop());\n            stack.push(evaluateOperator(a, b, c));\n        } \n        else {\n            return undefined; // invalid expression found\n        }\n        i++;\n    }\n    let result = stack.pop();\n\n    return (isNaN(result) ? undefined : parseFloat(result));\n\n}\n\nexport default function calculate(expression) {\n    try {\n        if (inputIsValid(expression)) {\n            let pfe = getPostFixExpression(expression);\n            let result = evaluatePostFixExpression(pfe);\n            return result;\n        }\n    } catch (error) {\n        console.error(error);\n    }\n    \n}\n\n\n// let testString = '98'\n// console.log(\"input: \"+testString);\n// let pfe = getPostFixExpression(testString);\n// console.log(\"Post Fix:\" + pfe);\n// let result = evaluatePostFixExpression(pfe);\n// console.log(result);\n","import React from 'react';\nimport './App.css';\n// import Button from './Button';\nimport List from './List';\nimport calculate from './calculator.js';\n\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      expression: '5 * ( -6.5 + 2 ) - 12 / 4',\n      results: [],\n      expressions: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event) {\n    this.setState({\n      expression: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let result = calculate(this.state.expression)\n    this.setState({\n      expressions: [...this.state.expressions, this.state.expression + \" = \" + result],\n      expression: String(result),\n      results: [...this.state.results, result]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form>\n        <span className=\"font-weight-bolder\">Calculator</span>\n          <div className=\"form-group\">\n            <div className=\"input-group mb-3\">\n            <input type=\"text\" className=\"form-control\" placeholder=\"Expression\" aria-label=\"Expression\" value={this.state.expression} onChange={this.handleChange}></input>\n              <div className=\"input-group-append\">\n                \n                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}><span>=</span></button>\n                \n              </div>\n            </div>\n          </div>\n        </form>\n        {this.state.expressions.length > 0 &&\n          <span className=\"font-weight-bolder\">History</span>\n        }\n        <List items={this.state.expressions} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}